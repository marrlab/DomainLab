@startuml
' 
' *--  composition
' <|-- extension
' o-- aggregation
' --  association (1 to n or 1 to 1 or n to 1)
' ..>
'Dependency is a weaker form of bond which indicates that one class depends on 
'another because it uses it at some point in time. One class depends on 
'another if the independent class is a parameter variable or local variable of 
'a method of the dependent class. This is different from an association, where 
'an attribute of the dependent class is an instance of the independent class. 
'Sometimes the relationship between two classes is very weak. They are not 
'implemented with member variables at all. Rather they might be implemented as 
'member function arguments.
package task {
  abstract class Task {
    - transformations
    - datasets for training domain
    - datasets for test domain
  }
  Task <|-- TaskFolder
  Task <|-- TaskPathList
}

package algos {
  abstract class AlgoBuilder {}
  class Algorithm{}
  class ConcreteAlgoBuilder {}
  package trainer {
    class Trainer {
    - update_regularization_weight()
    - update_model_parameter()
    + calculate_loss()
    }
  }
  package observer {
    class Observer {
    + calculate_metric()
    }
  }
  package model_selection {
    class ModelSel {}
  }
} 

package dataset <<DataBase>>{
  class Dataset {
    +__get__item__()
  }
}

package model{
  abstract class Model {
  + extract_feature()
  + calculate_task_loss()
  + calculate_regularization_loss()
  + calculate_metric()
  }
  abstract class ModelBuilder {
  +build_model_componet()
  }
  class ConcreteModel {}
  class ConcreteModelBuilder {}
  package networks {}
}


  package experiment {
    class Experiment {
    + execute()
    }
    class TaskHandler{}
    class AlgoHandler{}
  }


interface UserInput{
- task
- algorithm
+ read_yml_for_configuration()
}

class benchmark{
 + run_experiment()
 + plot_results()
 + read_yml_for_configuration()
}



UserInput -- Task
ModelBuilder <|-- ConcreteModelBuilder
UserInput -- AlgoBuilder
benchmark -- AlgoBuilder
Experiment --* benchmark
Trainer *-- Observer
Trainer *-- Model
Task o-- Dataset
Model <|-- ConcreteModel
AlgoBuilder <|-- ConcreteAlgoBuilder
Model *-- ModelBuilder
Model *-- networks
AlgoHandler *-- AlgoBuilder
Experiment *-- TaskHandler
Experiment *-- AlgoHandler
TaskHandler *-- Task
ModelBuilder -- networks
ConcreteAlgoBuilder -- Trainer
ConcreteAlgoBuilder -- Observer
ConcreteAlgoBuilder -- ModelSel

AlgoBuilder *-- Algorithm
Algorithm *-- Trainer
Algorithm *-- Observer
Observer *-- ModelSel

Model -- Observer
ModelSel -- Observer
ConcreteModelBuilder -- ConcreteModel
@enduml
