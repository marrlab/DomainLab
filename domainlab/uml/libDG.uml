@startuml
' 
' *--  composition
' <|-- extension
' o-- aggregation
' --  association (1 to n or 1 to 1 or n to 1)
' ..>
'Dependency is a weaker form of bond which indicates that one class depends on 
'another because it uses it at some point in time. One class depends on 
'another if the independent class is a parameter variable or local variable of 
'a method of the dependent class. This is different from an association, where 
'an attribute of the dependent class is an instance of the independent class. 
'Sometimes the relationship between two classes is very weak. They are not 
'implemented with member variables at all. Rather they might be implemented as 
'member function arguments.
package tasks {
  abstract class Task {
    - transformations
    - datasets (training domains)
    - datasets (test domains)
  }
  Task <|-- TaskFolder
  Task <|-- TaskPathList
}

package algos {
  abstract class AlgoBuilder {
  + build_model()
  + build_trainer()
  + build_observer()
  + model_specific_task_processing()
  }
  class ConcreteAlgoBuilder {
  + build_model()
  + build_trainer()
  + build_observer()
  + model_specific_task_processing()
  }
  package trainers {
    class Trainer {
    + update_regularization_weight()
    + update_model_parameter()
    + calculate_loss()
    - model
    - observer
    - task
    }
  }
  package observer {
    class Observer {
    + trainer.model.calculate_metric() 
    }
  }
  package model_selection {
    class ModelSel {
    - early_stop
    }
  }
} 

package datasets <<DataBase>>{
  class Dataset {
    +__get__item__()
  }
}

package YMLConfiguration <<DataBase>>{
}

package models{
  abstract class Model {
  + extract_feature()
  + calculate_task_loss()
  + calculate_regularization_loss()
  + calculate_metric()
  }
  abstract class ModelBuilder {
  +build_model_componet()
  }
  class ConcreteModel {
  + calculate_regularization_loss()
  + extract_feature()
  }
  class ConcreteModelBuilder {}
  package networks {
  }
}


  package experiment {
    class Experiment {
  - task
  - trainer
  + execute()
    }
    class TaskHandler{}
    class AlgoHandler{}
  }


interface UserInput{
- task
- hyperparameters
+ read_yml_for_configuration()
+ command_line_arguments()
}

protocol benchmark{
 + run_experiment()
 + plot_results()
 + read_yml_for_configuration()
}



UserInput -- YMLConfiguration
UserInput -- tasks
UserInput -- TaskHandler
ModelBuilder <|-- ConcreteModelBuilder
UserInput -- AlgoHandler
Experiment --* benchmark
Trainer *-- Observer
Trainer *-- ConcreteModel
Task o-- Dataset
Model <|-- ConcreteModel
AlgoBuilder <|-- ConcreteAlgoBuilder
Model *-- ModelBuilder
ConcreteModel *-- networks
AlgoHandler *-- ConcreteAlgoBuilder
Experiment *-- TaskHandler
Experiment *-- AlgoHandler
TaskHandler *-- tasks
ConcreteModelBuilder -- networks

ConcreteAlgoBuilder *-- Trainer
ConcreteAlgoBuilder -- ConcreteModel
ConcreteAlgoBuilder -- Observer
ConcreteAlgoBuilder -- Trainer
Observer *-- ModelSel

ModelSel -- Observer
ConcreteModelBuilder --* ConcreteModel
benchmark -- UserInput
@enduml
